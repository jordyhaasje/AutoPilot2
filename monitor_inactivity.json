{
  "name": "AutoPilot - Monitor Inactivity",
  "nodes": [
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 9 * * *"
            }
          ]
        }
      },
      "id": "cron-trigger",
      "name": "Cron Trigger",
      "type": "n8n-nodes-base.cron",
      "typeVersion": 1,
      "position": [240, 300]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "TENANT_ID",
              "value": "00000000-0000-0000-0000-00000000d001"
            }
          ]
        }
      },
      "id": "config-tenant",
      "name": "Config (Tenant)",
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [460, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT cs.conversation_id, cs.inactivity_days, c.subject, cu.email\nFROM conversation_state cs\nJOIN conversations c ON c.id = cs.conversation_id\nJOIN customers cu ON cu.id = c.customer_id\nWHERE cs.tenant_id = $1 \n  AND cs.inactivity_days >= 3\n  AND c.status = 'open'\nORDER BY cs.inactivity_days DESC;",
        "options": {}
      },
      "id": "find-inactive-conversations",
      "name": "Find Inactive Conversations",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [680, 300],
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Build inactivity notifications\nconst conversations = $(\"Find Inactive Conversations\").first().json;\nconst notifications = [];\n\nfor (const conv of conversations) {\n  notifications.push({\n    tenant_id: $(\"Config (Tenant)\").first().json.TENANT_ID,\n    conversation_id: conv.conversation_id,\n    type: \"inactivity_reminder\",\n    payload: {\n      inactivity_days: conv.inactivity_days,\n      subject: conv.subject,\n      customer_email: conv.email\n    },\n    priority: \"normal\"\n  });\n}\n\nreturn { notifications };"
      },
      "id": "build-inactivity-notifications",
      "name": "Build Inactivity Notifications",
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [900, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO notifications (tenant_id, conversation_id, type, payload, priority) VALUES ($1, $2, $3, $4, $5);",
        "options": {}
      },
      "id": "insert-notifications",
      "name": "Insert Notifications",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [1120, 300],
      "credentials": {
        "postgres": {
          "id": "KpdXYnkZStlD3p2g",
          "name": "Postgres account"
        }
      }
    }
  ],
  "connections": {
    "Cron Trigger": {
      "main": [
        [
          {
            "node": "Config (Tenant)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Config (Tenant)": {
      "main": [
        [
          {
            "node": "Find Inactive Conversations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Find Inactive Conversations": {
      "main": [
        [
          {
            "node": "Build Inactivity Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Inactivity Notifications": {
      "main": [
        [
          {
            "node": "Insert Notifications",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": null,
  "versionId": "1"
}
